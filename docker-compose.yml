version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: crypto-bot-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - crypto-bot-network

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: crypto-bot-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # Performance optimizations for HFT
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 16
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - crypto-bot-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: crypto-bot-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - crypto-bot-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: crypto-bot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - crypto-bot-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-bot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - crypto-bot-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: crypto-bot-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - crypto-bot-network

  # Main crypto bot application
  crypto-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: crypto-bot-app
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8000:8000"  # Prometheus metrics
      - "8001:8001"  # Health check
    environment:
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - BINANCE_TESTNET=${BINANCE_TESTNET:-true}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC_ORDER_BOOK=order_book_updates
      - KAFKA_CLIENT_ID=crypto_hft_bot
      - SYMBOLS=${SYMBOLS:-BTCUSDT,ETHUSDT}
      - ORDER_BOOK_DEPTH=${ORDER_BOOK_DEPTH:-20}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
      - PROMETHEUS_PORT=8000
      - HEALTH_CHECK_PORT=8001
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - crypto-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Kalman Filter Service for Dynamic Hedge Ratio Calculation
  kalman-filter-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: crypto-bot-kalman-filter
    command: ["python", "-m", "services.kalman_filter.main"]
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_CONSUMER_TOPIC=trade-ticks
      - KAFKA_PRODUCER_TOPIC=signals-hedge-ratio
      - KAFKA_CONSUMER_GROUP=kalman-filter-service
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - crypto-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import requests; requests.get('http://localhost:8002/health')\" || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # GARCH Volatility Service for Dynamic Threshold Calculation
  garch-volatility-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: crypto-bot-garch-volatility
    command: ["python", "-m", "services.garch_model.main"]
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_CONSUMER_TOPIC=spread-data
      - KAFKA_PRODUCER_TOPIC=signals-thresholds
      - KAFKA_CONSUMER_GROUP=garch-volatility-service
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - crypto-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c \"print('GARCH service running')\" || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Execution Service for Trading Strategy Orchestration
  execution-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: crypto-bot-execution
    command: ["python", "-m", "services.execution.main"]
    depends_on:
      kafka:
        condition: service_healthy
      garch-volatility-service:
        condition: service_started
      kalman-filter-service:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - BINANCE_TESTNET=${BINANCE_TESTNET:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - crypto-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c \"print('Execution service running')\" || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  crypto-bot-network:
    driver: bridge
