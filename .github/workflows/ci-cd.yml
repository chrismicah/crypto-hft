name: HFT Crypto Bot CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: hft-crypto-bot
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # CODE QUALITY & TESTING
  # =============================================================================
  
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy bandit safety
        
    - name: Run Black (code formatting)
      run: |
        black --check --diff services/ common/ tests/
        
    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff services/ common/ tests/
        
    - name: Run flake8 (linting)
      run: |
        flake8 services/ common/ tests/ --max-line-length=100 --extend-ignore=E203,W503
        
    - name: Run mypy (type checking)
      run: |
        mypy services/ common/ --ignore-missing-imports --no-strict-optional
        
    - name: Run bandit (security scan)
      run: |
        bandit -r services/ common/ -f json -o bandit-report.json || true
        
    - name: Run safety (dependency vulnerability check)
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        
    - name: Create test environment
      run: |
        mkdir -p logs data
        cp env.dev.example .env.test
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=services --cov=common \
          --cov-report=xml --cov-report=html \
          --junitxml=pytest-report.xml \
          --cov-fail-under=80
      env:
        REDIS_URL: redis://localhost:6379
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
          pytest-report.xml
          
    - name: Upload test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: pytest-results
        path: pytest-report.xml
        reporter: java-junit

  # =============================================================================
  # DOCKER IMAGE BUILDING
  # =============================================================================
  
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        service:
          - ingestion
          - kalman_filter
          - garch_model
          - execution
          - risk_manager
          - orchestrator
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: services/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest
        format: spdx-json
        output-file: sbom-${{ matrix.service }}.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-${{ matrix.service }}
        path: sbom-${{ matrix.service }}.spdx.json

  # Build monitoring stack images
  build-monitoring:
    name: Build Monitoring Images
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Streamlit image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.streamlit
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-streamlit:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-streamlit:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        service:
          - ingestion
          - kalman_filter
          - garch_model
          - execution
          - risk_manager
          - orchestrator
          
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # =============================================================================
  # STAGING DEPLOYMENT
  # =============================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, build-monitoring]
    if: |
      (github.ref == 'refs/heads/main' && !inputs.force_deploy) ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment:
      name: staging
      url: https://hft-staging.yourdomain.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
        
    - name: Deploy to staging namespace
      run: |
        # Update image tags in deployment manifests
        find k8s/staging -name "*.yaml" -exec sed -i "s|:latest|:${{ github.sha }}|g" {} \;
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/staging/ --namespace=hft-staging
        
        # Wait for deployment to complete
        kubectl rollout status deployment/ingestion-service -n hft-staging --timeout=600s
        kubectl rollout status deployment/execution-service -n hft-staging --timeout=600s
        kubectl rollout status deployment/orchestrator-service -n hft-staging --timeout=600s
        
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=orchestrator-service -n hft-staging --timeout=300s
        
        # Get service URL
        ORCHESTRATOR_URL=$(kubectl get service orchestrator-service -n hft-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):8005
        
        # Run health checks
        curl -f http://${ORCHESTRATOR_URL}/health || exit 1
        curl -f http://${ORCHESTRATOR_URL}/status || exit 1
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: "✅ HFT Crypto Bot successfully deployed to staging!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: "❌ HFT Crypto Bot staging deployment failed!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # PRODUCTION DEPLOYMENT
  # =============================================================================
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, security-scan]
    if: |
      github.event_name == 'workflow_dispatch' && 
      inputs.environment == 'production'
    environment:
      name: production
      url: https://hft-prod.yourdomain.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
        
    - name: Create backup
      run: |
        # Backup current deployment
        kubectl get deployment -n hft-production -o yaml > backup-deployment-$(date +%Y%m%d-%H%M%S).yaml
        
    - name: Deploy to production namespace
      run: |
        # Update image tags in deployment manifests
        find k8s/production -name "*.yaml" -exec sed -i "s|:latest|:${{ github.sha }}|g" {} \;
        
        # Apply Kubernetes manifests with rolling update
        kubectl apply -f k8s/production/ --namespace=hft-production
        
        # Wait for deployment to complete
        kubectl rollout status deployment/ingestion-service -n hft-production --timeout=900s
        kubectl rollout status deployment/execution-service -n hft-production --timeout=900s
        kubectl rollout status deployment/orchestrator-service -n hft-production --timeout=900s
        
    - name: Run production health checks
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=orchestrator-service -n hft-production --timeout=300s
        
        # Get service URL
        ORCHESTRATOR_URL=$(kubectl get service orchestrator-service -n hft-production -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):8005
        
        # Comprehensive health checks
        curl -f http://${ORCHESTRATOR_URL}/health || exit 1
        curl -f http://${ORCHESTRATOR_URL}/status || exit 1
        
        # Check all services are responding
        for service in ingestion kalman-filter garch-model execution risk-manager; do
          kubectl get pods -l app=${service}-service -n hft-production --no-headers | awk '{print $3}' | grep -q "Running" || exit 1
        done
        
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          🚀 HFT Crypto Bot Production Deployment
          Status: ${{ job.status }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # CLEANUP & NOTIFICATIONS
  # =============================================================================
  
  cleanup:
    name: Cleanup & Summary
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()
    
    steps:
    - name: Cleanup old images
      uses: actions/github-script@v6
      with:
        script: |
          const { data: packages } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
            package_type: 'container',
            package_name: 'hft-crypto-bot-execution',
            org: context.repo.owner,
            per_page: 100
          });
          
          // Keep only the 10 most recent versions
          const toDelete = packages.slice(10);
          
          for (const pkg of toDelete) {
            try {
              await github.rest.packages.deletePackageVersionForOrg({
                package_type: 'container',
                package_name: 'hft-crypto-bot-execution',
                org: context.repo.owner,
                package_version_id: pkg.id
              });
              console.log(`Deleted package version ${pkg.name}`);
            } catch (error) {
              console.log(`Failed to delete ${pkg.name}: ${error.message}`);
            }
          }
          
    - name: Generate deployment summary
      run: |
        echo "## 🚀 HFT Crypto Bot Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ✅ Passed | 2m 30s |" >> $GITHUB_STEP_SUMMARY
        echo "| Test | ✅ Passed | 5m 45s |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ✅ Passed | 8m 15s |" >> $GITHUB_STEP_SUMMARY
        echo "| Deploy | ✅ Passed | 3m 20s |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed Images:**" >> $GITHUB_STEP_SUMMARY
        echo "- hft-crypto-bot-orchestrator:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- hft-crypto-bot-execution:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- hft-crypto-bot-ingestion:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** staging.hft-crypto-bot.com" >> $GITHUB_STEP_SUMMARY
