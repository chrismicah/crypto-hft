name: Feature Branch Testing

on:
  push:
    branches-ignore: [ main, develop ]
  pull_request:
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # =============================================================================
  # QUICK VALIDATION FOR FEATURE BRANCHES
  # =============================================================================
  
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort pytest pytest-asyncio
        
    - name: Run quick linting
      run: |
        # Fast linting checks
        black --check --diff --fast services/ common/ tests/
        isort --check-only --diff services/ common/ tests/
        flake8 services/ common/ tests/ --max-line-length=100 --extend-ignore=E203,W503 --statistics
        
    - name: Run unit tests
      run: |
        # Run only unit tests, skip integration tests
        pytest tests/ -v -k "not integration" --tb=short
        
    - name: Validate Docker build
      run: |
        # Validate Dockerfiles can be parsed
        for dockerfile in services/*/Dockerfile; do
          docker build --dry-run -f "$dockerfile" . || exit 1
        done
        
    - name: Comment PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('ðŸ¤– Feature Branch Validation')
          );
          
          const body = `## ðŸ¤– Feature Branch Validation
          
          âœ… **Quick validation passed!**
          
          - Code formatting: âœ… Passed
          - Import sorting: âœ… Passed  
          - Linting: âœ… Passed
          - Unit tests: âœ… Passed
          - Docker builds: âœ… Validated
          
          This branch is ready for review and merge to trigger full CI/CD pipeline.
          `;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
